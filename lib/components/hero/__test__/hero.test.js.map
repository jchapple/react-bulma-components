{"version":3,"sources":["../../../../src/components/hero/__test__/hero.test.js"],"names":["describe","it","expect","Hero","toMatchSnapshot","Head","Body","Footer","component","renderer","create","toJSON","height","concat","Object","keys","CONSTANTS","COLORS","map","key","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Hero from '..';\nimport CONSTANTS from '../../../constants';\n\ndescribe('Hero component', () => {\n  it('Should exist', () => {\n    expect(Hero).toMatchSnapshot();\n  });\n  it('Should expose Hero head, body and footer', () => {\n    expect(Hero.Head).toMatchSnapshot();\n    expect(Hero.Body).toMatchSnapshot();\n    expect(Hero.Footer).toMatchSnapshot();\n  });\n  it('Should have hero classname', () => {\n    const component = renderer.create(\n      <Hero>\n        Test\n        {' '}\n        <a>\nGive me\n        </a>\n      </Hero>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(\n      <Hero className=\"other-class this-is-a-test\">\n        <p>\nDefault\n        </p>\n      </Hero>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(\n      <Hero style={{ height: 250 }}>\n        <p>\nDefault\n        </p>\n      </Hero>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use gradient style', () => {\n    const component = renderer.create(\n      <Hero color=\"primary\" gradient>\n        <p>\nDefault\n        </p>\n      </Hero>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should render Hero with hero head, body and footer', () => {\n    const component = renderer.create(\n      <Hero size=\"fullheight\" color=\"primary\">\n        <Hero.Head renderAs=\"header\">\n          <div className=\"bd-notification is-info\">\nHeader\n          </div>\n        </Hero.Head>\n        <Hero.Body>\n          Body\n        </Hero.Body>\n        <Hero.Footer renderAs=\"footer\">\n          <div className=\"bd-notification is-danger\">\nFooter\n          </div>\n        </Hero.Footer>\n      </Hero>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  [null]\n    .concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]))\n    .map(color => (\n      it(`Should use use color ${color}`, () => {\n        const component = renderer.create(\n          <Hero color={color}>\n            <p>\nDefault\n            </p>\n          </Hero>);\n        expect(component.toJSON()).toMatchSnapshot();\n      })\n    ));\n});\n"],"file":"hero.test.js"}