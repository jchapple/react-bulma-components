{"version":3,"sources":["../../../../src/components/message/__test__/message.test.js"],"names":["describe","it","expect","Message","toMatchSnapshot","component","renderer","create","toJSON","width","zIndex","Custom","props","children","propTypes","PropTypes","node","isRequired"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAgBC,eAAhB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;AACzC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD,QACE,6BAAC,SAAD,CAAS,MAAT,sBADF,EAIE,6BAAC,SAAD,CAAS,IAAT,sBAJF,CADgB,CAAlB;;AAUAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAZC,CAAF;AAaAH,EAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AAC1D,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,SAAS,EAAC;AAAnB,OACE,6BAAC,SAAD,CAAS,MAAT,sBADF,EAIE,6BAAC,SAAD,CAAS,IAAT,sBAJF,CADgB,CAAlB;;AAUAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAZC,CAAF;AAaAH,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AAC3C,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,QAAQ,EAAC;AAAlB,kCADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AAC3C,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,QAAQ,EAAC,SAAlB;AAA4B,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB;AAAnC,qDADgB,CAAlB;;AAIAR,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzD;AACA,QAAMU,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,aAClB,kCAAOA,KAAP,YAEGA,KAAK,CAACC,QAFT,CADkB;AAAA,KAApB;;AAMAF,IAAAA,MAAM,CAACG,SAAP,GAAmB;AAAED,MAAAA,QAAQ,EAAEE,mBAAUC,IAAV,CAAeC;AAA3B,KAAnB;;AAEA,QAAMZ,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,QAAQ,EAAEI;AAAnB,oCADgB,CAAlB;;AAIAT,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAfC,CAAF;AAgBD,CA5DO,CAAR","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport renderer from 'react-test-renderer';\nimport Message from '..';\n\ndescribe('Message component', () => {\n  it('Should Exist', () => {\n    expect(Message).toMatchSnapshot();\n  });\n  it('Should have message classnames', () => {\n    const component = renderer.create(\n      <Message>\n        <Message.Header>\nLorem Ipsum\n        </Message.Header>\n        <Message.Body>\nLorem Ipsum\n        </Message.Body>\n      </Message>,\n    );\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat Bulma class with classes in props', () => {\n    const component = renderer.create(\n      <Message className=\"other-class\">\n        <Message.Header>\nLorem Ipsum\n        </Message.Header>\n        <Message.Body>\nLorem Ipsum\n        </Message.Body>\n      </Message>,\n    );\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should render as an html section', () => {\n    const component = renderer.create(\n      <Message renderAs=\"section\">\nThis should be a section\n      </Message>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should have custom inline styles', () => {\n    const component = renderer.create(\n      <Message renderAs=\"section\" style={{ width: 200, zIndex: 1 }}>\nThis should be a section with custom styles\n      </Message>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should accept a react Element as renderAs prop', () => {\n    // eslint-disable-next-line react/prop-types\n    const Custom = props => (\n      <p {...props}>\nCustom\n        {props.children}\n      </p>\n    );\n    Custom.propTypes = { children: PropTypes.node.isRequired };\n\n    const component = renderer.create(\n      <Message renderAs={Custom}>\nThis should be a p element\n      </Message>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"message.test.js"}