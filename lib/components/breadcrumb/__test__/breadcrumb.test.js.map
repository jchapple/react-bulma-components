{"version":3,"sources":["../../../../src/components/breadcrumb/__test__/breadcrumb.test.js"],"names":["describe","it","component","renderer","create","url","name","active","expect","toJSON","toMatchSnapshot","map","separator","marginTop"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACrCC,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AACjC,QAAMC,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAChC,MAAA,KAAK,EAAE,CACL;AACEC,QAAAA,GAAG,EAAE,GADP;AAEEC,QAAAA,IAAI,EAAE;AAFR,OADK,EAKL;AACED,QAAAA,GAAG,EAAE,UADP;AAEEC,QAAAA,IAAI,EAAE;AAFR,OALK,EASL;AACED,QAAAA,GAAG,EAAE,SADP;AAEEC,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,MAAM,EAAE;AAHV,OATK;AADyB,MAAhB,CAAlB;;AAiBAC,IAAAA,MAAM,CAACN,SAAS,CAACO,MAAV,EAAD,CAAN,CAA2BC,eAA3B;AACD,GAnBC,CAAF;AAoBA,GAAC,IAAD,EAAO,OAAP,EAAgB,KAAhB,EAAuB,QAAvB,EAAiC,UAAjC,EAA6CC,GAA7C,CAAiD,UAAAC,SAAS;AAAA,WACxDX,EAAE,gCAAyBW,SAAzB,GAAsC,YAAM;AAC5C,UAAMV,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAChC,QAAA,SAAS,EAAEQ,SADqB;AAEhC,QAAA,KAAK,EAAE,CACL;AACEN,UAAAA,IAAI,EAAE,WADR;AAEED,UAAAA,GAAG,EAAE;AAFP,SADK,EAIF;AACDC,UAAAA,IAAI,EAAE,YADL;AAEDD,UAAAA,GAAG,EAAE;AAFJ,SAJE,EAOF;AACDC,UAAAA,IAAI,EAAE,kBADL;AAEDD,UAAAA,GAAG,EAAE,IAFJ;AAGDE,UAAAA,MAAM,EAAE;AAHP,SAPE;AAFyB,QAAhB,CAAlB;;AAgBAC,MAAAA,MAAM,CAACN,SAAS,CAACO,MAAV,EAAD,CAAN,CAA2BC,eAA3B;AACD,KAlBC,CADsD;AAAA,GAA1D;AAqBAT,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAClD,QAAMC,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAChC,MAAA,KAAK,EAAE;AAAES,QAAAA,SAAS,EAAE;AAAb,OADyB;AAEhC,MAAA,IAAI,EAAC,OAF2B;AAGhC,MAAA,KAAK,EAAE,CACL;AACER,QAAAA,GAAG,EAAE,GADP;AAEEC,QAAAA,IAAI,EAAE;AAFR,OADK,EAKL;AACED,QAAAA,GAAG,EAAE,UADP;AAEEC,QAAAA,IAAI,EAAE;AAFR,OALK,EASL;AACED,QAAAA,GAAG,EAAE,SADP;AAEEC,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,MAAM,EAAE;AAHV,OATK;AAHyB,MAAhB,CAAlB;;AAmBAC,IAAAA,MAAM,CAACN,SAAS,CAACO,MAAV,EAAD,CAAN,CAA2BC,eAA3B;AACD,GArBC,CAAF;AAsBD,CAhEO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Breadcrumb from '..';\n\ndescribe('Breadcrumb component', () => {\n  it('Should be a Breadcrumb', () => {\n    const component = renderer.create(<Breadcrumb\n      items={[\n        {\n          url: '/',\n          name: 'Home',\n        },\n        {\n          url: '/section',\n          name: 'Section',\n        },\n        {\n          url: '/detail',\n          name: 'Details',\n          active: true,\n        },\n      ]}\n    />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  [null, 'arrow', 'dot', 'bullet', 'succeeds'].map(separator => (\n    it(`should use separator ${separator}`, () => {\n      const component = renderer.create(<Breadcrumb\n        separator={separator}\n        items={[\n          {\n            name: 'Storybook',\n            url: '#1',\n          }, {\n            name: 'Breadcrumb',\n            url: '#2',\n          }, {\n            name: 'Breadcrumb Types',\n            url: '#3',\n            active: true,\n          },\n        ]}\n      />);\n      expect(component.toJSON()).toMatchSnapshot();\n    })\n  ));\n  it('Should use inline style and custom size', () => {\n    const component = renderer.create(<Breadcrumb\n      style={{ marginTop: 10 }}\n      size=\"large\"\n      items={[\n        {\n          url: '/',\n          name: 'Home',\n        },\n        {\n          url: '/section',\n          name: 'Section',\n        },\n        {\n          url: '/detail',\n          name: 'Details',\n          active: true,\n        },\n      ]}\n    />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"breadcrumb.test.js"}