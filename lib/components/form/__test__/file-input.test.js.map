{"version":3,"sources":["../../../../src/components/form/__test__/file-input.test.js"],"names":["describe","beforeEach","global","window","JSDOM","it","expect","InputFile","toMatchSnapshot","component","renderer","create","toJSON","onChange","jest","fn","width","find","simulate","target","files","name","state","toBe","toBeCalled","undefined"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAEAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCC,EAAAA,UAAU,CAAC,YAAM;AACf;AACAC,IAAAA,MAAM,CAACC,MAAP,GAAiB,IAAIC,YAAJ,CAAU,wCAAV,CAAD,CAAsDD,MAAtE;AACD,GAHS,CAAV;AAIAE,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,WAAD,CAAN,CAAkBC,eAAlB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,WAAD;AAAW,MAAA,QAAQ,EAAE,oBAAM,CAAE;AAA7B,MADgB,CAAlB;;AAEAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAJC,CAAF;AAMAH,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC9C,QAAMQ,QAAQ,GAAGC,IAAI,CAACC,EAAL,EAAjB;AACA,QAAMN,SAAS,GAAG,qBAChB,6BAAC,WAAD;AAAW,MAAA,SAAS,EAAC,YAArB;AAAkC,MAAA,KAAK,EAAC,EAAxC;AAA2C,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAlD;AAAkE,MAAA,QAAQ,EAAEH;AAA5E,MADgB,CAAlB;AAGAJ,IAAAA,SAAS,CAACQ,IAAV,CAAe,yBAAf,EAA0CC,QAA1C,CAAmD,QAAnD,EAA6D;AAC3DC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CAAC;AACNC,UAAAA,IAAI,EAAE;AADA,SAAD;AADD;AADmD,KAA7D;AAOAf,IAAAA,MAAM,CAACG,SAAS,CAACa,KAAV,CAAgB,UAAhB,CAAD,CAAN,CAAoCC,IAApC,CAAyC,sBAAzC;AACAjB,IAAAA,MAAM,CAACO,QAAD,CAAN,CAAiBW,UAAjB;AACD,GAdC,CAAF;AAgBAnB,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,QAAMQ,QAAQ,GAAGC,IAAI,CAACC,EAAL,EAAjB;AACA,QAAMN,SAAS,GAAG,qBAChB,6BAAC,WAAD;AAAW,MAAA,SAAS,EAAC,YAArB;AAAkC,MAAA,KAAK,EAAC,EAAxC;AAA2C,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAlD;AAAkE,MAAA,QAAQ,EAAEH;AAA5E,MADgB,CAAlB;AAGAJ,IAAAA,SAAS,CAACQ,IAAV,CAAe,yBAAf,EAA0CC,QAA1C,CAAmD,QAAnD,EAA6D;AAC3DC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD;AADmD,KAA7D;AAKAd,IAAAA,MAAM,CAACG,SAAS,CAACa,KAAV,CAAgB,UAAhB,CAAD,CAAN,CAAoCC,IAApC,CAAyCE,SAAzC;AACAnB,IAAAA,MAAM,CAACO,QAAD,CAAN,CAAiBW,UAAjB;AACD,GAZC,CAAF;AAaD,CA3CO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { shallow } from 'enzyme';\nimport { JSDOM } from 'jsdom';\n\nimport { InputFile } from '..';\n\ndescribe('Dropdown component', () => {\n  beforeEach(() => {\n    // eslint-disable-next-line\n    global.window = (new JSDOM('<body><div id=\"app-root\"></div></body>')).window;\n  });\n  it('Should Exist', () => {\n    expect(InputFile).toMatchSnapshot();\n  });\n  it('Should render file input tree', () => {\n    const component = renderer.create(\n      <InputFile onChange={() => {}} />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('should call onChange with file data', () => {\n    const onChange = jest.fn();\n    const component = shallow(\n      <InputFile className=\"input-file\" value=\"\" style={{ width: 400 }} onChange={onChange} />,\n    );\n    component.find('.input-file .file-input').simulate('change', {\n      target: {\n        files: [{\n          name: 'dummyValue.something',\n        }],\n      },\n    });\n    expect(component.state('filename')).toBe('dummyValue.something');\n    expect(onChange).toBeCalled();\n  });\n\n  it('should call onChange without file data', () => {\n    const onChange = jest.fn();\n    const component = shallow(\n      <InputFile className=\"input-file\" value=\"\" style={{ width: 400 }} onChange={onChange} />,\n    );\n    component.find('.input-file .file-input').simulate('change', {\n      target: {\n        files: [],\n      },\n    });\n    expect(component.state('filename')).toBe(undefined);\n    expect(onChange).toBeCalled();\n  });\n});\n"],"file":"file-input.test.js"}