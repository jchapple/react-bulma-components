{"version":3,"sources":["../../../../../src/components/form/components/__test__/select.test.js"],"names":["describe","it","expect","Select","toMatchSnapshot","component","renderer","create","toJSON","width"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,eAAD,CAAN,CAAeC,eAAf;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACvC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,eAAD,QACE,iDADF,EAIE,iDAJF,EAOE,iDAPF,CADgB,CAAlB;;AAYAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAdC,CAAF;AAeAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,eAAD;AAAQ,MAAA,SAAS,EAAC;AAAlB,OACE,iDADF,EAIE,iDAJF,EAOE,iDAPF,CADgB,CAAlB;;AAYAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAdC,CAAF;AAeAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,eAAD;AAAQ,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT;AAAf,OACE,iDADF,EAIE,iDAJF,EAOE,iDAPF,CADgB,CAAlB;;AAYAP,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAdC,CAAF;AAeAH,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,eAAD;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAuB,MAAA,IAAI,EAAC,OAA5B;AAAoC,MAAA,QAAQ,MAA5C;AAA6C,MAAA,QAAQ;AAArD,OACE,iDADF,EAIE,iDAJF,EAOE,iDAPF,CADgB,CAAlB;;AAYAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAdC,CAAF;AAeD,CAhEO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Select from '../select';\n\ndescribe('Select component', () => {\n  it('Should exist', () => {\n    expect(Select).toMatchSnapshot();\n  });\n  it('Should have select classname', () => {\n    const component = renderer.create(\n      <Select>\n        <option>\n1\n        </option>\n        <option>\n2\n        </option>\n        <option>\n3\n        </option>\n      </Select>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(\n      <Select className=\"other-class this-is-a-test\">\n        <option>\n1\n        </option>\n        <option>\n2\n        </option>\n        <option>\n3\n        </option>\n      </Select>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(\n      <Select style={{ width: '100%' }}>\n        <option>\n1\n        </option>\n        <option>\n2\n        </option>\n        <option>\n3\n        </option>\n      </Select>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be large, red, disabled and multioption', () => {\n    const component = renderer.create(\n      <Select color=\"danger\" size=\"large\" multiple disabled>\n        <option>\n1\n        </option>\n        <option>\n2\n        </option>\n        <option>\n3\n        </option>\n      </Select>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"select.test.js"}