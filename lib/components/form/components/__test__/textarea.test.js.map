{"version":3,"sources":["../../../../../src/components/form/components/__test__/textarea.test.js"],"names":["describe","it","expect","Textarea","toMatchSnapshot","component","renderer","create","toJSON","height"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,iBAAD,CAAN,CAAiBC,eAAjB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;AACzC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,iBAAD,OAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,iBAAD;AAAU,MAAA,SAAS,EAAC;AAApB,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,iBAAD;AAAU,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV;AAAjB,MAAhB,CAAlB;;AACAP,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,iBAAD;AAAU,MAAA,IAAI,EAAE,EAAhB;AAAoB,MAAA,QAAQ,MAA5B;AAA6B,MAAA,IAAI,EAAC;AAAlC,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,+CAAD,EAAkD,YAAM;AACxD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,iBAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAuB,MAAA,QAAQ,MAA/B;AAAgC,MAAA,WAAW,EAAC;AAA5C,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAID,CAxBO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Textarea from '../textarea';\n\ndescribe('Textarea component', () => {\n  it('Should exist', () => {\n    expect(Textarea).toMatchSnapshot();\n  });\n  it('Should have textarea classname', () => {\n    const component = renderer.create(<Textarea />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(<Textarea className=\"other-class this-is-a-test\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(<Textarea style={{ height: 250 }} />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be large with 10 rows and readOnly', () => {\n    const component = renderer.create(<Textarea rows={10} readOnly size=\"large\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be disabled with placeholder and value', () => {\n    const component = renderer.create(<Textarea value=\"TEST\" disabled placeholder=\"hello tests\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"textarea.test.js"}