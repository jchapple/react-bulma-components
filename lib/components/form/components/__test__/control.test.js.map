{"version":3,"sources":["../../../../../src/components/form/components/__test__/control.test.js"],"names":["describe","it","expect","Control","toMatchSnapshot","component","renderer","create","toJSON","height"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,gBAAD,CAAN,CAAgBC,eAAhB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,gBAAD,QACE;AAAG,MAAA,SAAS,EAAC;AAAb,OACE,kDADF,EAIE,oDAJF,CADF,CADgB,CAAlB;;AAWAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAbC,CAAF;AAcAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,gBAAD;AAAS,MAAA,SAAS,EAAC;AAAnB,OACE,kDADF,CADgB,CAAlB;;AAMAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,gBAAD;AAAS,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV;AAAhB,OACE,kDADF,CADgB,CAAlB;;AAMAP,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAClD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,gBAAD;AAAS,MAAA,QAAQ,EAAC;AAAlB,OACE,kDADF,CADgB,CAAlB;;AAMAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,+CAAD,EAAkD,YAAM;AACxD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,gBAAD;AAAS,MAAA,SAAS,MAAlB;AAAmB,MAAA,OAAO,MAA1B;AAA2B,MAAA,IAAI,EAAC;AAAhC,OACE,kDADF,CADgB,CAAlB;;AAMAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASD,CAtDO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Control from '../control';\n\ndescribe('Control component', () => {\n  it('Should exist', () => {\n    expect(Control).toMatchSnapshot();\n  });\n  it('Should have control classname', () => {\n    const component = renderer.create(\n      <Control>\n        <p className=\"bd-notification is-success\">\n          <p>\nDefault\n          </p>\n          <p>\nContainer\n          </p>\n        </p>\n      </Control>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(\n      <Control className=\"other-class this-is-a-test\">\n        <p>\nDefault\n        </p>\n      </Control>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(\n      <Control style={{ height: 250 }}>\n        <p>\nDefault\n        </p>\n      </Control>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should render as a html section element', () => {\n    const component = renderer.create(\n      <Control renderAs=\"section\">\n        <p>\nDefault\n        </p>\n      </Control>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be fullwidth, loading and size = large', () => {\n    const component = renderer.create(\n      <Control fullwidth loading size=\"large\">\n        <p>\nDefault\n        </p>\n      </Control>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"control.test.js"}