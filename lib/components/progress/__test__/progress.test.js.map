{"version":3,"sources":["../../../../src/components/progress/__test__/progress.test.js"],"names":["describe","it","expect","Progress","toMatchSnapshot","component","renderer","create","toJSON","width","concat","Object","keys","CONSTANTS","COLORS","map","key","color"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAiBC,eAAjB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC7C,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAU,MAAA,KAAK,EAAE,EAAjB;AAAqB,MAAA,GAAG,EAAE;AAA1B,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAU,MAAA,KAAK,EAAE,EAAjB;AAAqB,MAAA,GAAG,EAAE,GAA1B;AAA+B,MAAA,SAAS,EAAC;AAAzC,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAU,MAAA,KAAK,EAAE,EAAjB;AAAqB,MAAA,GAAG,EAAE,GAA1B;AAA+B,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT;AAAtC,MAAhB,CAAlB;;AACAP,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAM;AAC1B,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAU,MAAA,KAAK,EAAE,EAAjB;AAAqB,MAAA,GAAG,EAAE,GAA1B;AAA+B,MAAA,IAAI,EAAC;AAApC,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAIA,GAAC,IAAD,EACGM,MADH,CACUC,MAAM,CAACC,IAAP,CAAYC,mBAAUC,MAAtB,EAA8BC,GAA9B,CAAkC,UAAAC,GAAG;AAAA,WAAIH,mBAAUC,MAAV,CAAiBE,GAAjB,CAAJ;AAAA,GAArC,CADV,EAEGD,GAFH,CAEO,UAAAE,KAAK;AAAA,WACRhB,EAAE,gCAAyBgB,KAAzB,GAAkC,YAAM;AACxC,UAAMZ,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAU,QAAA,KAAK,EAAE,EAAjB;AAAqB,QAAA,GAAG,EAAE,GAA1B;AAA+B,QAAA,KAAK,EAAEU;AAAtC,QAAhB,CAAlB;;AACAf,MAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,KAHC,CADM;AAAA,GAFZ;AAQD,CA5BO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Progress from '..';\nimport CONSTANTS from '../../../constants';\n\ndescribe('Progress component', () => {\n  it('Should exist', () => {\n    expect(Progress).toMatchSnapshot();\n  });\n  it('Should have notification classname', () => {\n    const component = renderer.create(<Progress value={30} max={100} />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(<Progress value={30} max={100} className=\"other-class this-is-a-test\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(<Progress value={30} max={100} style={{ width: 250 }} />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be Large', () => {\n    const component = renderer.create(<Progress value={30} max={100} size=\"large\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  [null]\n    .concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]))\n    .map(color => (\n      it(`Should use use color ${color}`, () => {\n        const component = renderer.create(<Progress value={30} max={100} color={color} />);\n        expect(component.toJSON()).toMatchSnapshot();\n      })\n    ));\n});\n"],"file":"progress.test.js"}