{"version":3,"sources":["../../../../src/components/tile/__test__/tile.test.js"],"names":["describe","it","expect","Tile","toMatchSnapshot","component","renderer","create","toJSON","height","concat","Object","keys","CONSTANTS","COLORS","map","key","color"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAaC,eAAb;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC7C,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD,QACE;AAAK,MAAA,GAAG,EAAC,aAAT;AAAuB,MAAA,GAAG,EAAC;AAA3B,MADF,CADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,kDADF,CADgB,CAAlB;;AAMAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAM,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV;AAAb,OACE,kDADF,CADgB,CAAlB;;AAMAP,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAM,MAAA,QAAQ,EAAC;AAAf,OACE,kDADF,CADgB,CAAlB;;AAMAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASA,GAAC,IAAD,EACGM,MADH,CACUC,MAAM,CAACC,IAAP,CAAYC,mBAAUC,MAAtB,EAA8BC,GAA9B,CAAkC,UAAAC,GAAG;AAAA,WAAIH,mBAAUC,MAAV,CAAiBE,GAAjB,CAAJ;AAAA,GAArC,CADV,EAEGD,GAFH,CAEO,UAAAE,KAAK;AAAA,WACRhB,EAAE,gCAAyBgB,KAAzB,GAAkC,YAAM;AACxC,UAAMZ,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAM,QAAA,YAAY,MAAlB;AAAmB,QAAA,KAAK,EAAEU;AAA1B,SACE,kDADF,CADgB,CAAlB;;AAMAf,MAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,KARC,CADM;AAAA,GAFZ;AAaD,CAnDO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Tile from '..';\nimport CONSTANTS from '../../../constants';\n\ndescribe('Tile component', () => {\n  it('Should exist', () => {\n    expect(Tile).toMatchSnapshot();\n  });\n  it('Should have notification classname', () => {\n    const component = renderer.create(\n      <Tile>\n        <img alt=\"placeholder\" src=\"http://bulma.io/images/placeholders/128x128.png\" />\n      </Tile>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(\n      <Tile className=\"other-class this-is-a-test\">\n        <p>\n          Default\n        </p>\n      </Tile>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(\n      <Tile style={{ height: 250 }}>\n        <p>\n          Default\n        </p>\n      </Tile>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should render as Section', () => {\n    const component = renderer.create(\n      <Tile renderAs=\"section\">\n        <p>\n          Default\n        </p>\n      </Tile>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  [null]\n    .concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]))\n    .map(color => (\n      it(`Should use use color ${color}`, () => {\n        const component = renderer.create(\n          <Tile notification color={color}>\n            <p>\n              Default\n            </p>\n          </Tile>);\n        expect(component.toJSON()).toMatchSnapshot();\n      })\n    ));\n});\n"],"file":"tile.test.js"}