{"version":3,"sources":["../../../../src/components/tag/__test__/tag.test.js"],"names":["describe","it","expect","Tag","toMatchSnapshot","Group","component","renderer","create","toJSON","width","concat","Object","keys","CONSTANTS","COLORS","map","key","color"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAYC,eAAZ;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClCC,IAAAA,MAAM,CAACC,UAAIE,KAAL,CAAN,CAAkBD,eAAlB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,QAAMK,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD,mBADgB,CAAlB;;AAIAN,IAAAA,MAAM,CAACI,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BL,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMK,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,SAAS,EAAC;AAAf,kBADgB,CAAlB;;AAIAN,IAAAA,MAAM,CAACI,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BL,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMK,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT;AAAZ,kBADgB,CAAlB;;AAIAR,IAAAA,MAAM,CAACI,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BL,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAM;AAC1B,QAAMK,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,IAAI,EAAC;AAAV,mBADgB,CAAlB;;AAIAN,IAAAA,MAAM,CAACI,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BL,eAA3B;AACD,GANC,CAAF;AAQAH,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/B,QAAMK,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD,CAAK,KAAL;AAAW,MAAA,OAAO;AAAlB,OACE,6BAAC,SAAD,gBADF,EAIE,6BAAC,SAAD,gBAJF,CADgB,CAAlB;;AAUAN,IAAAA,MAAM,CAACI,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BL,eAA3B;AACD,GAZC,CAAF;AAaA,GAAC,IAAD,EACGO,MADH,CACUC,MAAM,CAACC,IAAP,CAAYC,mBAAUC,MAAtB,EAA8BC,GAA9B,CAAkC,UAAAC,GAAG;AAAA,WAAIH,mBAAUC,MAAV,CAAiBE,GAAjB,CAAJ;AAAA,GAArC,CADV,EAEGD,GAFH,CAEO,UAAAE,KAAK;AAAA,WACRjB,EAAE,gCAAyBiB,KAAzB,GAAkC,YAAM;AACxC,UAAMZ,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,QAAA,KAAK,EAAEU;AAAZ,gBAEGA,KAFH,CADgB,CAAlB;;AAKAhB,MAAAA,MAAM,CAACI,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BL,eAA3B;AACD,KAPC,CADM;AAAA,GAFZ;AAYD,CA7DO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Tag from '..';\nimport CONSTANTS from '../../../constants';\n\ndescribe('Tag component', () => {\n  it('Should exist', () => {\n    expect(Tag).toMatchSnapshot();\n  });\n  it('Should expose Tag Group', () => {\n    expect(Tag.Group).toMatchSnapshot();\n  });\n  it('Should have tag classname', () => {\n    const component = renderer.create(\n      <Tag>\n        Tag name\n      </Tag>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(\n      <Tag className=\"other-class this-is-a-test\">\n        Tag name\n      </Tag>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(\n      <Tag style={{ width: 250 }}>\n        Tag name\n      </Tag>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be Large', () => {\n    const component = renderer.create(\n      <Tag size=\"large\">\n        Tag Large\n      </Tag>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('Should be group tags', () => {\n    const component = renderer.create(\n      <Tag.Group gapless>\n        <Tag>\n          Tag 1\n        </Tag>\n        <Tag>\n          Tag 2\n        </Tag>\n      </Tag.Group>,\n    );\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  [null]\n    .concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]))\n    .map(color => (\n      it(`Should use use color ${color}`, () => {\n        const component = renderer.create(\n          <Tag color={color}>\n            tag\n            {color}\n          </Tag>);\n        expect(component.toJSON()).toMatchSnapshot();\n      })\n    ));\n});\n"],"file":"tag.test.js"}