{"version":3,"sources":["../../../../src/components/image/__test__/image.test.js"],"names":["describe","it","expect","Image","toMatchSnapshot","component","renderer","create","toJSON","image","find","simulate","props","toHaveProperty","setProps","src","alt"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAcC,eAAd;AACD,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAM;AACtC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAO,MAAA,GAAG,EAAC;AAAX,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,kBAAD,EAAqB,YAAM;AAC3B,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,GAAG,EAAC;AAAzB,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5B,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,GAAG,EAAC;AAAnB,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAM;AAC1B,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,SAAD;AAAO,MAAA,IAAI,EAAE,EAAb;AAAiB,MAAA,GAAG,EAAC;AAArB,MAAhB,CAAlB;;AACAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AAC3D,QAAMI,SAAS,GAAG,qBAChB,6BAAC,SAAD;AAAO,MAAA,GAAG,EAAC,2BAAX;AAAuC,MAAA,QAAQ,EAAC;AAAhD,MADgB,CAAlB;AAGA,QAAMI,KAAK,GAAGJ,SAAS,CAACK,IAAV,CAAe,KAAf,CAAd;AACAD,IAAAA,KAAK,CAACE,QAAN,CAAe,OAAf;AACAT,IAAAA,MAAM,CAACG,SAAS,CAACK,IAAV,CAAe,KAAf,EAAsBE,KAAtB,EAAD,CAAN,CAAsCC,cAAtC,CAAqD,KAArD,EAA4D,6BAA5D;AACD,GAPC,CAAF;AASAZ,EAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5B,QAAMI,SAAS,GAAG,qBAAQ,6BAAC,SAAD;AAAO,MAAA,GAAG,EAAC;AAAX,MAAR,CAAlB;AACAA,IAAAA,SAAS,CAACS,QAAV,CAAmB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAnB;AACAb,IAAAA,MAAM,CAACG,SAAS,CAACK,IAAV,CAAe,KAAf,EAAsBE,KAAtB,EAAD,CAAN,CAAsCC,cAAtC,CAAqD,KAArD,EAA4D,2BAA5D;AACD,GAJC,CAAF;AAMAZ,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,QAAMI,SAAS,GAAG,qBAAQ,6BAAC,SAAD;AAAO,MAAA,GAAG,EAAC;AAAX,MAAR,CAAlB;AACAA,IAAAA,SAAS,CAACS,QAAV,CAAmB;AAAEE,MAAAA,GAAG,EAAE;AAAP,KAAnB;AACAd,IAAAA,MAAM,CAACG,SAAS,CAACK,IAAV,CAAe,KAAf,EAAsBE,KAAtB,EAAD,CAAN,CAAsCC,cAAtC,CAAqD,KAArD,EAA4D,2BAA5D;AACD,GAJC,CAAF;AAKD,CA7CO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { shallow } from 'enzyme';\nimport Image from '..';\n\ndescribe('Image component', () => {\n  it('Should exist', () => {\n    expect(Image).toMatchSnapshot();\n  });\n\n  it('Should have image classname', () => {\n    const component = renderer.create(<Image src=\"http://mydomain.com/image\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('Should be square', () => {\n    const component = renderer.create(<Image size=\"square\" src=\"http://mydomain.com/image\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('Should be rounded', () => {\n    const component = renderer.create(<Image rounded src=\"http://mydomain.com/image\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('Should be 32x32', () => {\n    const component = renderer.create(<Image size={32} src=\"http://mydomain.com/image\" />);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('Should have use default image if error encounter', () => {\n    const component = shallow(\n      <Image src=\"http://mydomain.com/image\" fallback=\"http://mydomain.com/default\" />,\n    );\n    const image = component.find('img');\n    image.simulate('error');\n    expect(component.find('img').props()).toHaveProperty('src', 'http://mydomain.com/default');\n  });\n\n  it('Should update src', () => {\n    const component = shallow(<Image src=\"http://mydomain.com/image\" />);\n    component.setProps({ src: 'http://mydomain.com/other' });\n    expect(component.find('img').props()).toHaveProperty('src', 'http://mydomain.com/other');\n  });\n\n  it('Should NOT update src', () => {\n    const component = shallow(<Image src=\"http://mydomain.com/image\" />);\n    component.setProps({ alt: 'change prop' });\n    expect(component.find('img').props()).toHaveProperty('src', 'http://mydomain.com/image');\n  });\n});\n"],"file":"image.test.js"}