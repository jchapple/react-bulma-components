{"version":3,"sources":["../../../../src/components/box/__test__/box.test.js"],"names":["describe","it","expect","Box","toMatchSnapshot","component","renderer","create","toJSON","width","zIndex","Custom","props","children","propTypes","PropTypes","node","isRequired"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAYC,eAAZ;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD,mBADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AAC1D,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,SAAS,EAAC;AAAf,kBADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AAC3C,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,QAAQ,EAAC;AAAd,kCADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AAC3C,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,QAAQ,EAAC,SAAd;AAAwB,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB;AAA/B,qDADgB,CAAlB;;AAIAR,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzD;AACA,QAAMU,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,aAClB,kCAAOA,KAAP,YAEGA,KAAK,CAACC,QAFT,CADkB;AAAA,KAApB;;AAOAF,IAAAA,MAAM,CAACG,SAAP,GAAmB;AAAED,MAAAA,QAAQ,EAAEE,mBAAUC,IAAV,CAAeC;AAA3B,KAAnB;;AAEA,QAAMZ,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAK,MAAA,QAAQ,EAAEI;AAAf,oCADgB,CAAlB;;AAIAT,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAhBC,CAAF;AAiBD,CAjDO,CAAR","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport renderer from 'react-test-renderer';\nimport Box from '..';\n\ndescribe('Box component', () => {\n  it('Should Exist', () => {\n    expect(Box).toMatchSnapshot();\n  });\n  it('Should have box classname', () => {\n    const component = renderer.create(\n      <Box>\nFacebook\n      </Box>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat Bulma class with classes in props', () => {\n    const component = renderer.create(\n      <Box className=\"other-class test\">\nFacebook\n      </Box>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should render as an html section', () => {\n    const component = renderer.create(\n      <Box renderAs=\"section\">\nThis should be a section\n      </Box>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should have custom inline styles', () => {\n    const component = renderer.create(\n      <Box renderAs=\"section\" style={{ width: 200, zIndex: 1 }}>\nThis should be a section with custom styles\n      </Box>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should accept a react Element as renderAs prop', () => {\n    // eslint-disable-next-line react/prop-types\n    const Custom = props => (\n      <p {...props}>\nCustom\n        {props.children}\n      </p>\n    );\n\n    Custom.propTypes = { children: PropTypes.node.isRequired };\n\n    const component = renderer.create(\n      <Box renderAs={Custom}>\nThis should be a p element\n      </Box>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"box.test.js"}