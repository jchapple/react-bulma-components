{"version":3,"sources":["../../../../src/components/heading/__test__/heading.test.js"],"names":["describe","it","expect","Heading","toMatchSnapshot","component","renderer","create","toJSON","height"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClCC,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvBC,IAAAA,MAAM,CAACC,SAAD,CAAN,CAAgBC,eAAhB;AACD,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAM;AACtC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD,gBAEG,GAFH,EAGE,kDAHF,CADgB,CAAlB;;AAQAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GAVC,CAAF;AAWAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,SAAS,EAAC;AAAnB,OACE,kDADF,CADgB,CAAlB;;AAMAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV;AAAhB,OACE,kDADF,CADgB,CAAlB;;AAMAP,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GARC,CAAF;AASAH,EAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAM;AACvD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,IAAI,EAAE,CAAf;AAAkB,MAAA,QAAQ,MAA1B;AAA2B,MAAA,QAAQ,EAAC;AAApC,kBADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACnD,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,MAAM,MAAf;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,QAAQ,EAAC;AAAlC,kBADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOAH,EAAAA,EAAE,CAAC,kBAAD,EAAqB,YAAM;AAC3B,QAAMI,SAAS,GAAGC,2BAASC,MAAT,CAChB,6BAAC,SAAD;AAAS,MAAA,MAAM,MAAf;AAAgB,MAAA,QAAQ,EAAC;AAAzB,kBADgB,CAAlB;;AAIAL,IAAAA,MAAM,CAACG,SAAS,CAACG,MAAV,EAAD,CAAN,CAA2BJ,eAA3B;AACD,GANC,CAAF;AAOD,CAtDO,CAAR","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport Heading from '..';\n\ndescribe('Heading component', () => {\n  it('Should exist', () => {\n    expect(Heading).toMatchSnapshot();\n  });\n  it('Should have title classname', () => {\n    const component = renderer.create(\n      <Heading>\n        Test\n        {' '}\n        <a>\nGive me\n        </a>\n      </Heading>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should concat classname in props with Bulma classname', () => {\n    const component = renderer.create(\n      <Heading className=\"other-class this-is-a-test\">\n        <p>\nDefault\n        </p>\n      </Heading>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should use inline styles', () => {\n    const component = renderer.create(\n      <Heading style={{ height: 250 }}>\n        <p>\nDefault\n        </p>\n      </Heading>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be a subtitle with size rendered as P', () => {\n    const component = renderer.create(\n      <Heading size={3} subtitle renderAs=\"p\">\n        Subtitle\n      </Heading>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should not be spaced because is subtitle', () => {\n    const component = renderer.create(\n      <Heading spaced subtitle renderAs=\"p\">\n        Subtitle\n      </Heading>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n  it('Should be spaced', () => {\n    const component = renderer.create(\n      <Heading spaced renderAs=\"p\">\n        Subtitle\n      </Heading>);\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n});\n"],"file":"heading.test.js"}